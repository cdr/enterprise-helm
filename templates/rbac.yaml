---
# The service account that the envproxy passes to cemanager on startup.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coder
  namespace: {{ .Release.Namespace | quote }}
  annotations:
  {{- range $key, $value := .Values.serviceAccount.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  labels:
  {{- range $key, $value := .Values.serviceAccount.labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
---
# The roles the cemanager needs cluster wide for
# checking available resources.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: coder-{{ .Release.Namespace }}-cluster
rules:
  - apiGroups:
      - "" # indicates the core API group
    resources:
      # Lets us determine the cores/RAM available on a node
      # to avoid letting a user select an unschedulable number.
      - nodes
      - pods
      # Lets us determine what namespaces are available for
      # scheduling. The permissions for a namespace are handled
      # via regular namespaced Roles.
      - namespaces
    # We request read-only permissions at the cluster level to prevent
    # the product from making any surprising mutations.
    verbs:
      - get
      - list
---
# Bind the cluster role to the coder serviceaccount.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  namespace: {{ .Release.Namespace | quote }}
  name: coder-{{ .Release.Namespace }}-clusterbinding
subjects:
  - kind: ServiceAccount
    name: coder
    namespace: {{ .Release.Namespace | quote }}
roleRef:
  kind: ClusterRole
  name: coder-{{ .Release.Namespace }}-cluster
  apiGroup: rbac.authorization.k8s.io

{{- $namespaces := append .Values.namespaceWhitelist .Release.Namespace }}
{{- range $namespaces }}
---
# The roles the manager needs in the environments
# namespace in order to administer pods.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: coder
  namespace: {{ . | quote }}
rules:
  - apiGroups:
      - "" # indicates the core API group
      - "apps"
    resources:
      # Every environment deployment has a service.
      - services
      - pods
      # Required for creating registry pull secrets.
      - secrets
      # Required for the code-server volume and the environments' home volumes.
      - persistentvolumeclaims
      # Required for legacy reasons.
      - statefulsets
      # Every environment is a deployment.
      - deployments
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
      - deletecollection
  - apiGroups:
      - "" # indicates the core API group
    resources:
      - pods/exec
      - pods/log
      - events
      - configmaps
    verbs:
      - create
      - get
      - list
      - watch
  - apiGroups:
      - "apps"
    resources:
      # Required for legacy reasons.
      - statefulsets/scale
      # Auto-off requires being able to update the
      # replicas of a deployment from 1 to 0.
      - deployments/scale
    verbs:
      - update
  - apiGroups:
      - metrics.k8s.io
    resources:
      - pods
    # Necessary for gathering stats about an environment.
    verbs:
      - list
      - get
  - apiGroups:
      - networking.k8s.io
    resources:
      # Necessary for preventing inter-environment communication.
      - networkpolicies
    verbs:
      - create
      - delete
      - get
      - list
      - patch
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: {{ . | quote }}
  name: coder
subjects:
  - kind: ServiceAccount
    name: coder
    namespace: {{ $.Release.Namespace | quote }}
roleRef:
  kind: Role
  name: coder
  apiGroup: rbac.authorization.k8s.io
{{- end }}
