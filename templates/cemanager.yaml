# The following describes the Kubernetes deployment of the Coder service.
# The general setup is as follows:
#   - A namespace contains all the relevant resources for Coder.
#   - A deployment describes the configuration of the manager container.
#   - A service is created to route requests to the manager pod.
#   - A service account (along with a Role and Role binding) is created to grant
#     the manager the necessary permissions to administer environments.
#
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    coder.deployment: cemanager
  name: cemanager
  namespace: {{ .Release.Namespace | quote }}
  annotations:
  {{- range $key, $value := .Values.deploymentAnnotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
  replicas: {{ .Values.cemanager.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: "25%"
      maxUnavailable: "25%"
  selector:
    matchLabels:
      coder.deployment: cemanager
  template:
    metadata:
      labels:
        coder.deployment: cemanager
      annotations:
      {{- range $key, $value := .Values.deploymentAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
      # coder:coder
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      restartPolicy: Always
      # terminationGracePeriodSeconds should be set to the upper bound for container rebuilds and creates.
      # 5 minutes
      terminationGracePeriodSeconds: 300
      serviceAccountName: coder
{{- include "coder.services.nodeSelector" . | indent 6 }}
{{- include "coder.serviceTolerations" . | indent 6 }}
      initContainers:
        - name: migrations
          image: {{ .Values.cemanager.image | quote }}
          imagePullPolicy: {{ .Values.imagePullPolicy | quote }}
          env:
            - name: HUMAN_LOG
              value: {{ .Values.logging.human | quote }}
            - name: JSON_LOG
              value: {{ .Values.logging.json | quote }}
            - name: STACKDRIVER_LOG
              value: {{ .Values.logging.stackdriver | quote }}
            - name: SPLUNK_URL
              value: {{ .Values.logging.splunk.url | quote }}
            - name: SPLUNK_TOKEN
              value: {{ .Values.logging.splunk.token | quote }}
            - name: SPLUNK_CHANNEL
              value: {{ .Values.logging.splunk.channel | quote }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VERBOSE
              value: "true"
{{- include "coder.postgres.env" . | indent 12 }}
          command:
            # Bash is needed to pass signals correctly.
            - /bin/bash
            - -c
            - |
              echo Waiting on db;
              /wait_postgres.sh --host="$DB_HOST" --port="$DB_PORT" -U "$DB_USER";
              echo Starting entrypoint.sh;
              exec /entrypoint.sh cemanager migrate up
      containers:
        - name: cemanager
          image: {{ .Values.cemanager.image | quote }}
          imagePullPolicy: {{ .Values.imagePullPolicy | quote }}
          ports:
            - name: tcp-cemanager
              containerPort: 8080
          # cemanager is a daemon service, no need to allocate a tty for it.
          tty: false
          env:
            - name: SKIP_MIGRATIONS
              value: "true"
            - name: ASSETS_URL
            - name: HUMAN_LOG
              value: {{ .Values.logging.human | quote }}
            - name: JSON_LOG
              value: {{ .Values.logging.json | quote }}
            - name: STACKDRIVER_LOG
              value: {{ .Values.logging.stackdriver | quote }}
              # ENVBUILDER_IMAGE describes the image used to build
              # user images and populate them with coder assets
              # (such as code-server).
            - name: ENVBUILDER_IMAGE
              value: {{ .Values.envbuilder.image | quote }}
              # ENVBOX_IMAGE describes the image used to provide
              # additional features to users for running applications
              # such as dockerd and kubernetes.
            - name: ENVBOX_IMAGE
              value: {{ .Values.envbox.image | quote }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: VERBOSE
              value: "true"
            - name: BUILT_IN_ENVPROXY_TOKEN
              valueFrom:
                secretKeyRef:
                  name: built-in-envproxy-token
                  key: token
            - name: STORAGE_CLASS
              value: {{ .Values.storageClassName | quote }}
            - name: P2P_ENABLED
              value: {{ .Values.cemanager.p2p.enable | quote }}
{{- include "coder.environments.configMapEnv" . | indent 12 }}
{{- include "coder.postgres.env" . | indent 12 }}
          command:
            # Bash is needed to pass signals correctly.
            - /bin/bash
            - -c
            - |
              echo Waiting on db;
              PGSSLMODE="${DB_SSL_MODE:-prefer}" /wait_postgres.sh --host="$DB_HOST" --port="$DB_PORT" -U "$DB_USER";
              echo Starting entrypoint.sh;
              # Pass signals down to the envmanager.
              exec /entrypoint.sh cemanager run
          readinessProbe:
            httpGet:
              path: /cem-healthz
              port: 8080
            initialDelaySeconds: 10
            failureThreshold: 7
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /cem-healthz
              port: 8080
            initialDelaySeconds: 10
            failureThreshold: 7
            periodSeconds: 10
{{- include "coder.resources" .Values.cemanager.resources | indent 10 }}
{{- if and .Values.cemanager.p2p.enable .Values.ingress.tls.enable }}
          volumeMounts:
            - mountPath: /etc/coder/certificates
              name: tls
              readOnly: true
      volumes:
        - name: tls
          secret:
            secretName: {{ .Values.ingress.tls.hostSecretName | quote }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: cemanager
  namespace: {{ .Release.Namespace | quote }}
spec:
  type: {{ .Values.serviceType | quote}}
  selector:
    coder.deployment: cemanager
  ports:
    - name: tcp-cemanager
      port: 8080
      protocol: TCP
    - name: tcp-cemanager-turns
      port: 5349
      protocol: TCP
